{"0": {
    "doc": "Github Pages",
    "title": "GitHub Pages 사용한 블로그 생성 및 배포",
    "content": " ",
    "url": "/docs/development/github-pages.html#github-pages-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EB%B0%B0%ED%8F%AC",
    
    "relUrl": "/docs/development/github-pages.html#github-pages-사용한-블로그-생성-및-배포"
  },"1": {
    "doc": "Github Pages",
    "title": "목차",
    "content": ". | GitHub Pages 개요 | 사전 준비사항 | 저장소 생성 및 GitHub Pages 활성화 | 로컬 개발 환경 설정 | Jekyll 테마 선택 및 적용 | 기본 설정 (_config.yml) | 콘텐츠 구조 설정 | SEO 및 웹마스터 도구 설정 | 배포 및 자동화 | 성능 최적화 | 참고 자료 | . ",
    "url": "/docs/development/github-pages.html#%EB%AA%A9%EC%B0%A8",
    
    "relUrl": "/docs/development/github-pages.html#목차"
  },"2": {
    "doc": "Github Pages",
    "title": "GitHub Pages 개요",
    "content": "GitHub Pages는 GitHub에서 제공하는 무료 정적 웹사이트 호스팅 서비스입니다. | 무료 호스팅: 별도 비용 없이 웹사이트 운영 | Jekyll 지원: 정적 사이트 생성기 내장 | 커스텀 도메인: 개인 도메인 연결 가능 | HTTPS 자동 적용: SSL 인증서 자동 제공 | . ",
    "url": "/docs/development/github-pages.html#github-pages-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/development/github-pages.html#github-pages-개요"
  },"3": {
    "doc": "Github Pages",
    "title": "사전 준비사항",
    "content": "필수 요구사항 . | GitHub 계정 | Git 기본 지식 | 텍스트 에디터 | Ruby: Jekyll 실행을 위한 런타임 | . ",
    "url": "/docs/development/github-pages.html#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD",
    
    "relUrl": "/docs/development/github-pages.html#사전-준비사항"
  },"4": {
    "doc": "Github Pages",
    "title": "저장소 생성 및 GitHub Pages 활성화",
    "content": "Repository 생성 . | GitHub에 로그인 후 New repository 클릭 | Repository 이름을 username.github.io 형식으로 입력 | Public으로 설정 - (유료 플랜에서 단계적으로 Private 지원) | Add a README file 체크 | Create repository 클릭 | . GitHub Pages 활성화 . | 생성된 저장소의 Settings 탭 이동 | 왼쪽 메뉴에서 Pages 클릭 | Source를 Deploy from a branch 선택 | Branch를 main 선택 | Save 클릭 | . ",
    "url": "/docs/development/github-pages.html#%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1-%EB%B0%8F-github-pages-%ED%99%9C%EC%84%B1%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#저장소-생성-및-github-pages-활성화"
  },"5": {
    "doc": "Github Pages",
    "title": "로컬 개발 환경 설정",
    "content": "Ruby 설치 . brew install ruby echo 'export PATH=\"/opt/homebrew/opt/ruby/bin:$PATH\"' &gt;&gt; ~/.zshrc source ~/.zshrc . Jekyll 설치 . # Jekyll과 Bundler 설치 gem install jekyll bundler # WebRick 설치 (Ruby 3.0+에서 필요) gem install webrick . 저장소 클론 . # 저장소를 로컬로 클론 git clone https://github.com/username/username.github.io.git cd username.github.io . ",
    "url": "/docs/development/github-pages.html#%EB%A1%9C%EC%BB%AC-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#로컬-개발-환경-설정"
  },"6": {
    "doc": "Github Pages",
    "title": "Jekyll 테마 선택 및 적용",
    "content": "인기 Jekyll 테마 사이트 . | Jekyll Themes | Jekyll Themes IO | GitHub Jekyll Themes | . 테마 적용 방법 1: Remote Theme 사용 . (제공되는 테마를 바탕으로 커스텀할 항목이 많은 경우 오히려 복잡할 수 있음) . # _config.yml에 추가 remote_theme: username/theme-name plugins: - jekyll-remote-theme . 방법 2: Fork 또는 다운로드 . | 테마 저장소를 Fork하거나 ZIP 다운로드 | 파일들을 로컬 저장소에 복사 | bundle install 실행 | . 나의 경우 . just-the-docs 사용. 정보를 카테고리별로 깔끔하게 정리하고 추후 검색하기 용이한 템플릿으로 판단. just-the-docs에서 사용하는 검색에 사용하는 lunr라이브러리가 기본적으로 한국어 지원을 하지 않아서 한국어 검색 기능을 커스텀으로 추가. 참고; lunr-languages . Jekyll 사이트 초기화 . # 새로운 Jekyll 사이트 생성 jekyll new ./ # 의존성 설치 bundle install # 로컬 서버 실행 bundle exec jekyll serve # 브라우저에서 http://localhost:4000 확인 . ",
    "url": "/docs/development/github-pages.html#jekyll-%ED%85%8C%EB%A7%88-%EC%84%A0%ED%83%9D-%EB%B0%8F-%EC%A0%81%EC%9A%A9",
    
    "relUrl": "/docs/development/github-pages.html#jekyll-테마-선택-및-적용"
  },"7": {
    "doc": "Github Pages",
    "title": "기본 설정 (_config.yml)",
    "content": "# 사이트 기본 정보 title: \"내 블로그\" tagline: \"개발과 일상 이야기\" description: \"블로그입니다\" url: \"https://username.github.io\" baseurl: \"\" # 플러그인 plugins: - jekyll-feed - jekyll-sitemap - jekyll-seo-tag - ... 템플릿에 따라 표시되기도하고 숨겨져있기도 함. 검색시에 크롤러가 긁어갈 수 있는 항목들은 검색 최적화 고려해서 작성. 템플릿 및 플러그인마다 사용하는 항목이 있다면 적절히 추가. ",
    "url": "/docs/development/github-pages.html#%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95-_configyml",
    
    "relUrl": "/docs/development/github-pages.html#기본-설정-_configyml"
  },"8": {
    "doc": "Github Pages",
    "title": "콘텐츠 구조 설정",
    "content": "기본 디렉토리 구조 . username.github.io/ ├── _config.yml # Jekyll 설정 ├── index.md # 홈페이지 └── Gemfile # Ruby 의존성 . 필수 페이지 생성 . --- title: 홈 layout: default nav_order: 1 description: \"description\" permalink: / --- # Title Contents... markdown으로 index.md 적당히 작성 . ",
    "url": "/docs/development/github-pages.html#%EC%BD%98%ED%85%90%EC%B8%A0-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#콘텐츠-구조-설정"
  },"9": {
    "doc": "Github Pages",
    "title": "SEO 및 웹마스터 도구 설정",
    "content": "Google Search Console 등록 . | Google Search Console 접속 -&gt; 시작하기 | 속성 추가 -&gt; URL 접두어 선택 | 사이트 URL 입력: https://username.github.io | 소유권 확인용 HTML 파일을 저장소 루트에 업로드 | . Sitemap 생성 . # _config.yml에 플러그인 추가 plugins: - jekyll-sitemap . robots.txt 생성 . --- layout: null --- User-agent: * Allow: / Sitemap: http://localhost:4000/sitemap.xml . Google Analytics 연동 . &lt;!-- _includes/google-analytics.html --&gt; &lt;!-- Google tag (gtag.js) --&gt; &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt; &lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-XXXXXXXXXX'); &lt;/script&gt; . 내 경우엔 Footer에 추가함. ",
    "url": "/docs/development/github-pages.html#seo-%EB%B0%8F-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#seo-및-웹마스터-도구-설정"
  },"10": {
    "doc": "Github Pages",
    "title": "배포 및 자동화",
    "content": "GitHub Actions로 자동 배포 . # .github/workflows/pages.yml name: Build and deploy Jekyll site on: push: branches: [ main ] pull_request: branches: [ main ] jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Setup Ruby uses: ruby/setup-ruby@v1 with: ruby-version: 3.1 bundler-cache: true - name: Build site run: bundle exec jekyll build - name: Deploy to GitHub Pages if: github.ref == 'refs/heads/main' uses: peaceiris/actions-gh-pages@v3 with: github_token: $ publish_dir: ./_site . 빌드 &amp; 배포 확인 및 접속 . Github main 푸시 이후 build, deploy 상태 확인 https://minhopark1271.github.io/ . ",
    "url": "/docs/development/github-pages.html#%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%9E%90%EB%8F%99%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#배포-및-자동화"
  },"11": {
    "doc": "Github Pages",
    "title": "성능 최적화",
    "content": "CDN 사용 . # _config.yml cdn_url: \"https://cdn.jsdelivr.net/gh/username/username.github.io@main\" . 이미지가 많이 들어갈 일이 없을듯. 추후 고려 . 압축 및 최적화 . # _config.yml sass: style: compressed plugins: - jekyll-compress-html . 이것도 추후 고려 . ",
    "url": "/docs/development/github-pages.html#%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#성능-최적화"
  },"12": {
    "doc": "Github Pages",
    "title": "참고 자료",
    "content": ". | Jekyll 공식 문서 | GitHub Pages 문서 | Liquid 템플릿 언어 | Markdown 가이드 | Jekyll 테마 갤러리 | . ",
    "url": "/docs/development/github-pages.html#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C",
    
    "relUrl": "/docs/development/github-pages.html#참고-자료"
  },"13": {
    "doc": "Github Pages",
    "title": "Github Pages",
    "content": " ",
    "url": "/docs/development/github-pages.html",
    
    "relUrl": "/docs/development/github-pages.html"
  },"14": {
    "doc": "개발",
    "title": "개발",
    "content": "개발 관련 문서들입니다. ",
    "url": "/docs/development/",
    
    "relUrl": "/docs/development/"
  },"15": {
    "doc": "홈",
    "title": "Mimi Note",
    "content": " ",
    "url": "/#mimi-note",
    
    "relUrl": "/#mimi-note"
  },"16": {
    "doc": "홈",
    "title": "소개",
    "content": "기술, 개발, 사업, 투자, 취미, 여행 관련하여 조사하고 경험한 지식이 증발하지 않도록 모아두는 곳입니다. ",
    "url": "/#%EC%86%8C%EA%B0%9C",
    
    "relUrl": "/#소개"
  },"17": {
    "doc": "홈",
    "title": "홈",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"18": {
    "doc": "MCP",
    "title": "MCP(Model Context Protocol)",
    "content": "LLM이 외부 데이터와 도구에 표준화된 방식으로 접근할 수 있게 해주는 개방적 프로토콜 Anthropic에서 제안 / OpenAI는 A2A(Agent간 통신 프로토콜) 표준 제시 Introducing the Model Context Protocol – Anthropic Model Context Protocol . | 표준화된 연결: 다양한 AI 모델과 데이터 소스, 도구를 하나의 규칙으로 연결 | 지식 한계 극복: LLM의 훈련 데이터 한계, 업데이트 지연 문제를 외부 정보 연결로 해결 | 전문 도메인 지원: 의료, 기업, 내부 시스템 등 특화된 데이터와 지식에 접근 가능 | 통합 비용 절감: 각 시스템별 커스텀 개발 없이 MCP로 통합 가능 | 사전 구축된 커넥터: 파일 시스템, DB, 개발 도구, 생산성 도구 등 다양한 통합 지원 | 유연한 모델 교체: GPT-4, Claude, Gemini 등 다양한 LLM을 손쉽게 교체 가능 | 복잡한 워크플로우 지원: 여러 데이터/도구를 조합한 고도화된 AI 에이전트 구축 가능 | 핵심 역할 구조 . | MCP 서버: 도구/데이터 제공 | MCP 클라이언트: LLM과 서버 연결 | MCP 호스트: 사용자 인터페이스 | . | 보안 및 인증: 개인 액세스 토큰(PAT) 등 안전한 데이터 접근 방식 제공 | 비즈니스 가치 연결: AI와 실제 업무/서비스/데이터를 연결하는 다리 역할 | . ",
    "url": "/docs/development/mcp.html#mcpmodel-context-protocol",
    
    "relUrl": "/docs/development/mcp.html#mcpmodel-context-protocol"
  },"19": {
    "doc": "MCP",
    "title": "MCP 연동을 통한 LLM Agent의 역할 확장",
    "content": "Agent의 눈과 귀; 입력 확장 Agent의 팔 다리; 직접 실행 Agent, Lenggraph가 필요한 입력을 취득하고 실행하는 반복작업을 가능하게 함. 확장성 높음, 보안 및 안전성에 주의 필요. | 통합의 표준화: 기존에는 AI 모델과 외부 시스템(예: 데이터베이스, 웹 서비스, 애플리케이션)을 연결할 때마다 복잡한 맞춤형 코드를 작성해야 했으나, MCP는 단일 프로토콜로 통합하여 개발자가 효율적으로 다양한 시스템을 연동할 수 있게 함. | 에이전트형 AI 실현: MCP를 통해 AI는 단순 질의응답을 넘어, 날씨 API 조회, 캘린더 일정 등록, 파일 정리, 웹 크롤링 등 실제 외부 도구와 연동해 실시간 작업을 수행하는 에이전트로 동작할 수 있음. | 데이터 접근성 확대: AI 모델은 학습 데이터에만 의존하지 않고, MCP를 통해 기업 내부 데이터베이스, 최신 웹 정보 등 다양한 외부 데이터를 실시간으로 활용하여 더 정확하고 최신의 답변을 제공할 수 있음. | 유연하고 안전한 연결: MCP 구조는 서비스별 독립적 업데이트가 가능해 시스템 간 영향이 적고, 접근 권한을 세분화하여 AI가 필요한 데이터와 도구만 안전하게 사용할 수 있도록 지원함. | 개방형 생태계 조성: MCP는 오픈소스 표준으로 누구나 새로운 도구와 서비스를 MCP 생태계에 연결할 수 있어, 다양한 AI·도구·서비스가 상호작용하는 혁신적인 생태계가 빠르게 확장되고 있음. | . ",
    "url": "/docs/development/mcp.html#mcp-%EC%97%B0%EB%8F%99%EC%9D%84-%ED%86%B5%ED%95%9C-llm-agent%EC%9D%98-%EC%97%AD%ED%95%A0-%ED%99%95%EC%9E%A5",
    
    "relUrl": "/docs/development/mcp.html#mcp-연동을-통한-llm-agent의-역할-확장"
  },"20": {
    "doc": "MCP",
    "title": "MCP 서버, 클라이언트, 호스트 개념",
    "content": ". | MCP 서버: 다양한 도구(파일, DB, 웹, API 등)와 데이터를 LLM이 사용할 수 있도록 표준화된 연동을 제공 | MCP 클라이언트: LLM과 MCP 서버를 연결하는 브릿지 역할, 요청 전달 및 결과 반환 | MCP 호스트: Claude Desktop, Cursor IDE 등 사용자 인터페이스를 제공하며 MCP 클라이언트와 서버를 통합 (VS Code, Chat GPT, 기타 Agents…) | . ",
    "url": "/docs/development/mcp.html#mcp-%EC%84%9C%EB%B2%84-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8-%ED%98%B8%EC%8A%A4%ED%8A%B8-%EA%B0%9C%EB%85%90",
    
    "relUrl": "/docs/development/mcp.html#mcp-서버-클라이언트-호스트-개념"
  },"21": {
    "doc": "MCP",
    "title": "MCP 서버 리스팅 플랫폼",
    "content": "MCP 서버를 공유·탐색할 수 있는 주요 플랫폼 목록 . | MCP Market . | 주소: https://mcpmarket.com | 특징: 다양한 MCP 서버를 카테고리별로 정리한 대표적인 플랫폼. Claude, Cursor 등과 연동 가능한 서버를 한눈에 탐색할 수 있음. 매일 인기 서버 순위 갱신, 각 서버의 기능·API·커뮤니티 평판 제공. | . | GitHub MCP Registry . | 주소: https://github.com/modelcontextprotocol/servers | 설명: GitHub이 출시한 공식 MCP 서버 검색 허브. 안정성과 신뢰성 보장. GitHub Copilot 등 AI 도구에서 바로 서버 추가 가능. 각 서버의 README에서 기능·보안 정보 확인 가능. | . | Awesome MCP Servers . | 주소: https://github.com/punkpeye/awesome-mcp-servers | 설명: 전 세계 MCP 서버를 큐레이션한 오픈소스 목록. Claude, NotebookLM, Cursor 사용자들이 참고용으로 많이 활용. 300개 이상의 프로덕션급 서버 포함. | . | Smithery.ai . | 주소: https://smithery.ai | 설명: 실험적·커뮤니티 기반 MCP 서버를 모아둔 웹 디렉터리. NotebookLM 및 Anthropic 커뮤니티에서 자주 언급. 서버별 설치 명령어와 설정 예시 제공. | . | . ",
    "url": "/docs/development/mcp.html#mcp-%EC%84%9C%EB%B2%84-%EB%A6%AC%EC%8A%A4%ED%8C%85-%ED%94%8C%EB%9E%AB%ED%8F%BC",
    
    "relUrl": "/docs/development/mcp.html#mcp-서버-리스팅-플랫폼"
  },"22": {
    "doc": "MCP",
    "title": "주요 MCP 서버별 기능",
    "content": ". | Sequential Thinking MCP: . | 복잡한 문제를 단계별로 분해·실행 | 멀티스텝 워크플로우 관리 | 논리적 추론 및 오류 복구 지원 | . | Playwright MCP: . | 브라우저 자동화, 웹 탐색, 클릭, 입력, 접근성 진단, 데이터 크롤링 등 웹 자동화 | . | GitHub MCP: . | 리포지토리 검색, 클론, 이슈/PR 생성 | 코드 리뷰 등 오픈소스 협업 자동화 | . | Context7 MCP: . | 코드 분석, 문서 자동 생성, 함수/클래스 설명 추출, 다국어 문서화 지원. | 최신 Documentation 반영 | . | Figma MCP: . | Figma 디자인 정보 추출 | 컴포넌트 구조화 | UI 분석 및 코드 생성 | . | . ",
    "url": "/docs/development/mcp.html#%EC%A3%BC%EC%9A%94-mcp-%EC%84%9C%EB%B2%84%EB%B3%84-%EA%B8%B0%EB%8A%A5",
    
    "relUrl": "/docs/development/mcp.html#주요-mcp-서버별-기능"
  },"23": {
    "doc": "MCP",
    "title": "Local MCP 서버 운용",
    "content": "Connect to local MCP servers . ",
    "url": "/docs/development/mcp.html#local-mcp-%EC%84%9C%EB%B2%84-%EC%9A%B4%EC%9A%A9",
    
    "relUrl": "/docs/development/mcp.html#local-mcp-서버-운용"
  },"24": {
    "doc": "MCP",
    "title": "remote MCP 서버 사용",
    "content": "Connect to remote MCP servers . Remote MCP 서버는 로컬 MCP 서버와 유사하게 동작하지만, 인터넷에 호스팅되어 로컬 설치 없이 어디서든 접근할 수 있음 . MCP 연동 핵심은 서비스별로 필요한 인증 키 및 권한 설정인듯 . ",
    "url": "/docs/development/mcp.html#remote-mcp-%EC%84%9C%EB%B2%84-%EC%82%AC%EC%9A%A9",
    
    "relUrl": "/docs/development/mcp.html#remote-mcp-서버-사용"
  },"25": {
    "doc": "MCP",
    "title": "MCP 서버 개발",
    "content": "Build an MCP server . | Resources: File-like data that can be read by clients (like API responses or file contents) | Tools: Functions that can be called by the LLM (with user approval) | Prompts: Pre-written templates that help users accomplish specific tasks | . ",
    "url": "/docs/development/mcp.html#mcp-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C",
    
    "relUrl": "/docs/development/mcp.html#mcp-서버-개발"
  },"26": {
    "doc": "MCP",
    "title": "MCP 사용기 참조",
    "content": "우아한기술블로그 . ",
    "url": "/docs/development/mcp.html#mcp-%EC%82%AC%EC%9A%A9%EA%B8%B0-%EC%B0%B8%EC%A1%B0",
    
    "relUrl": "/docs/development/mcp.html#mcp-사용기-참조"
  },"27": {
    "doc": "MCP",
    "title": "TODO",
    "content": "직접 MCP 만들어보기 . | Read | Write | . ",
    "url": "/docs/development/mcp.html#todo",
    
    "relUrl": "/docs/development/mcp.html#todo"
  },"28": {
    "doc": "MCP",
    "title": "MCP",
    "content": " ",
    "url": "/docs/development/mcp.html",
    
    "relUrl": "/docs/development/mcp.html"
  }
}
