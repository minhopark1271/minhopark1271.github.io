{"0": {
    "doc": "Github Pages 블로그 생성",
    "title": "GitHub Pages 블로그 생성",
    "content": " ",
    "url": "/docs/development/github-pages.html#github-pages-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%83%9D%EC%84%B1",
    
    "relUrl": "/docs/development/github-pages.html#github-pages-블로그-생성"
  },"1": {
    "doc": "Github Pages 블로그 생성",
    "title": "목차",
    "content": ". | GitHub Pages 개요 | 사전 준비사항 | 저장소 생성 및 GitHub Pages 활성화 | 로컬 개발 환경 설정 | Jekyll 테마 선택 및 적용 | 기본 설정 (_config.yml) | 콘텐츠 구조 설정 | SEO 및 웹마스터 도구 설정 | 배포 및 자동화 | 성능 최적화 | 참고 자료 | . ",
    "url": "/docs/development/github-pages.html#%EB%AA%A9%EC%B0%A8",
    
    "relUrl": "/docs/development/github-pages.html#목차"
  },"2": {
    "doc": "Github Pages 블로그 생성",
    "title": "GitHub Pages 개요",
    "content": "GitHub Pages는 GitHub에서 제공하는 무료 정적 웹사이트 호스팅 서비스입니다. | 무료 호스팅: 별도 비용 없이 웹사이트 운영 | Jekyll 지원: 정적 사이트 생성기 내장 | 커스텀 도메인: 개인 도메인 연결 가능 | HTTPS 자동 적용: SSL 인증서 자동 제공 | . ",
    "url": "/docs/development/github-pages.html#github-pages-%EA%B0%9C%EC%9A%94",
    
    "relUrl": "/docs/development/github-pages.html#github-pages-개요"
  },"3": {
    "doc": "Github Pages 블로그 생성",
    "title": "사전 준비사항",
    "content": "필수 요구사항 . | GitHub 계정 | Git 기본 지식 | 텍스트 에디터 | Ruby: Jekyll 실행을 위한 런타임 | . ",
    "url": "/docs/development/github-pages.html#%EC%82%AC%EC%A0%84-%EC%A4%80%EB%B9%84%EC%82%AC%ED%95%AD",
    
    "relUrl": "/docs/development/github-pages.html#사전-준비사항"
  },"4": {
    "doc": "Github Pages 블로그 생성",
    "title": "저장소 생성 및 GitHub Pages 활성화",
    "content": "Repository 생성 . | GitHub에 로그인 후 New repository 클릭 | Repository 이름을 username.github.io 형식으로 입력 | Public으로 설정 - (유료 플랜에서 단계적으로 Private 지원) | Add a README file 체크 | Create repository 클릭 | . GitHub Pages 활성화 . | 생성된 저장소의 Settings 탭 이동 | 왼쪽 메뉴에서 Pages 클릭 | Source를 Deploy from a branch 선택 | Branch를 main 선택 | Save 클릭 | . ",
    "url": "/docs/development/github-pages.html#%EC%A0%80%EC%9E%A5%EC%86%8C-%EC%83%9D%EC%84%B1-%EB%B0%8F-github-pages-%ED%99%9C%EC%84%B1%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#저장소-생성-및-github-pages-활성화"
  },"5": {
    "doc": "Github Pages 블로그 생성",
    "title": "로컬 개발 환경 설정",
    "content": "Ruby 설치 . brew install ruby echo 'export PATH=\"/opt/homebrew/opt/ruby/bin:$PATH\"' &gt;&gt; ~/.zshrc source ~/.zshrc . Jekyll 설치 . # Jekyll과 Bundler 설치 gem install jekyll bundler # WebRick 설치 (Ruby 3.0+에서 필요) gem install webrick . 저장소 클론 . # 저장소를 로컬로 클론 git clone https://github.com/username/username.github.io.git cd username.github.io . ",
    "url": "/docs/development/github-pages.html#%EB%A1%9C%EC%BB%AC-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#로컬-개발-환경-설정"
  },"6": {
    "doc": "Github Pages 블로그 생성",
    "title": "Jekyll 테마 선택 및 적용",
    "content": "인기 Jekyll 테마 사이트 . | Jekyll Themes | Jekyll Themes IO | GitHub Jekyll Themes | . 테마 적용 방법 1: Remote Theme 사용 . (제공되는 테마를 바탕으로 커스텀할 항목이 많은 경우 오히려 복잡할 수 있음) . # _config.yml에 추가 remote_theme: username/theme-name plugins: - jekyll-remote-theme . 방법 2: Fork 또는 다운로드 . | 테마 저장소를 Fork하거나 ZIP 다운로드 | 파일들을 로컬 저장소에 복사 | bundle install 실행 | . 나의 경우 . just-the-docs 사용. 정보를 카테고리별로 깔끔하게 정리하고 추후 검색하기 용이한 템플릿으로 판단. just-the-docs에서 사용하는 검색에 사용하는 lunr라이브러리가 기본적으로 한국어 지원을 하지 않아서 한국어 검색 기능을 커스텀으로 추가. 참고; lunr-languages . Jekyll 사이트 초기화 . # 새로운 Jekyll 사이트 생성 jekyll new ./ # 의존성 설치 bundle install # 로컬 서버 실행 bundle exec jekyll serve # 브라우저에서 http://localhost:4000 확인 . ",
    "url": "/docs/development/github-pages.html#jekyll-%ED%85%8C%EB%A7%88-%EC%84%A0%ED%83%9D-%EB%B0%8F-%EC%A0%81%EC%9A%A9",
    
    "relUrl": "/docs/development/github-pages.html#jekyll-테마-선택-및-적용"
  },"7": {
    "doc": "Github Pages 블로그 생성",
    "title": "기본 설정 (_config.yml)",
    "content": "# 사이트 기본 정보 title: \"내 블로그\" tagline: \"개발과 일상 이야기\" description: \"블로그입니다\" url: \"https://username.github.io\" baseurl: \"\" # 플러그인 plugins: - jekyll-feed - jekyll-sitemap - jekyll-seo-tag - ... 템플릿에 따라 표시되기도하고 숨겨져있기도 함. 검색시에 크롤러가 긁어갈 수 있는 항목들은 검색 최적화 고려해서 작성. 템플릿 및 플러그인마다 사용하는 항목이 있다면 적절히 추가. ",
    "url": "/docs/development/github-pages.html#%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95-_configyml",
    
    "relUrl": "/docs/development/github-pages.html#기본-설정-_configyml"
  },"8": {
    "doc": "Github Pages 블로그 생성",
    "title": "콘텐츠 구조 설정",
    "content": "기본 디렉토리 구조 . username.github.io/ ├── _config.yml # Jekyll 설정 ├── index.md # 홈페이지 └── Gemfile # Ruby 의존성 . 필수 페이지 생성 . --- title: 홈 layout: default nav_order: 1 description: \"description\" permalink: / --- # Title Contents... markdown으로 index.md 적당히 작성 . ",
    "url": "/docs/development/github-pages.html#%EC%BD%98%ED%85%90%EC%B8%A0-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#콘텐츠-구조-설정"
  },"9": {
    "doc": "Github Pages 블로그 생성",
    "title": "SEO 및 웹마스터 도구 설정",
    "content": "Google Search Console 등록 . | Google Search Console 접속 -&gt; 시작하기 | 속성 추가 -&gt; URL 접두어 선택 | 사이트 URL 입력: https://username.github.io | 소유권 확인용 HTML 파일을 저장소 루트에 업로드 | . Sitemap 생성 . # _config.yml에 플러그인 추가 plugins: - jekyll-sitemap . robots.txt 생성 . --- layout: null --- User-agent: * Allow: / Sitemap: http://localhost:4000/sitemap.xml . Google Analytics 연동 . &lt;!-- _includes/google-analytics.html --&gt; &lt;!-- Google tag (gtag.js) --&gt; &lt;script async src=\"https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX\"&gt;&lt;/script&gt; &lt;script&gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-XXXXXXXXXX'); &lt;/script&gt; . 내 경우엔 Footer에 추가함. ",
    "url": "/docs/development/github-pages.html#seo-%EB%B0%8F-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EC%84%A4%EC%A0%95",
    
    "relUrl": "/docs/development/github-pages.html#seo-및-웹마스터-도구-설정"
  },"10": {
    "doc": "Github Pages 블로그 생성",
    "title": "배포 및 자동화",
    "content": "GitHub Actions로 자동 배포 . # .github/workflows/pages.yml name: Build and deploy Jekyll site on: push: branches: [ main ] pull_request: branches: [ main ] jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 - name: Setup Ruby uses: ruby/setup-ruby@v1 with: ruby-version: 3.1 bundler-cache: true - name: Build site run: bundle exec jekyll build - name: Deploy to GitHub Pages if: github.ref == 'refs/heads/main' uses: peaceiris/actions-gh-pages@v3 with: github_token: $ publish_dir: ./_site . ",
    "url": "/docs/development/github-pages.html#%EB%B0%B0%ED%8F%AC-%EB%B0%8F-%EC%9E%90%EB%8F%99%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#배포-및-자동화"
  },"11": {
    "doc": "Github Pages 블로그 생성",
    "title": "성능 최적화",
    "content": "CDN 사용 . # _config.yml cdn_url: \"https://cdn.jsdelivr.net/gh/username/username.github.io@main\" . 이미지가 많이 들어갈 일이 없을듯. 추후 고려 . 압축 및 최적화 . # _config.yml sass: style: compressed plugins: - jekyll-compress-html . 이것도 추후 고려 . ",
    "url": "/docs/development/github-pages.html#%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94",
    
    "relUrl": "/docs/development/github-pages.html#성능-최적화"
  },"12": {
    "doc": "Github Pages 블로그 생성",
    "title": "참고 자료",
    "content": ". | Jekyll 공식 문서 | GitHub Pages 문서 | Liquid 템플릿 언어 | Markdown 가이드 | Jekyll 테마 갤러리 | . ",
    "url": "/docs/development/github-pages.html#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C",
    
    "relUrl": "/docs/development/github-pages.html#참고-자료"
  },"13": {
    "doc": "Github Pages 블로그 생성",
    "title": "Github Pages 블로그 생성",
    "content": " ",
    "url": "/docs/development/github-pages.html",
    
    "relUrl": "/docs/development/github-pages.html"
  },"14": {
    "doc": "개발",
    "title": "개발",
    "content": "개발 관련 문서들입니다. ",
    "url": "/docs/development/",
    
    "relUrl": "/docs/development/"
  },"15": {
    "doc": "홈",
    "title": "Mimi Note",
    "content": " ",
    "url": "/#mimi-note",
    
    "relUrl": "/#mimi-note"
  },"16": {
    "doc": "홈",
    "title": "소개",
    "content": "기술, 개발, 사업, 투자, 취미, 여행 관련하여 조사하고 경험한 지식이 증발하지 않도록 모아두는 곳입니다. 주요 특징 . | 빠른 검색: 내장된 검색 기능으로 원하는 내용을 빠르게 찾을 수 있습니다 | 반응형 디자인: 모바일, 태블릿, 데스크톱 모든 환경에서 최적화된 경험을 제공합니다 | 다크 모드: 눈에 편한 다크 테마를 지원합니다 | GitHub Pages: GitHub Actions를 통해 자동으로 배포됩니다 | . ",
    "url": "/#%EC%86%8C%EA%B0%9C",
    
    "relUrl": "/#소개"
  },"17": {
    "doc": "홈",
    "title": "Getting started",
    "content": "구조 . 이 사이트는 다음과 같은 구조로 구성되어 있습니다: . blog/ ├── _config.yml # Jekyll 설정 ├── Gemfile # Ruby 의존성 ├── index.md # 홈페이지 ├── docs/ # 문서들 │ ├── guides/ # 가이드 │ └── tutorials/ # 튜토리얼 └── assets/ # 이미지, CSS 등 . 로컬 개발 . | 저장소를 클론합니다: git clone https://github.com/minhopark1271/minhopark1271.github.io.git cd minhopark1271.github.io . | 의존성을 설치합니다: bundle install . | 로컬 서버를 시작합니다: bundle exec jekyll serve . | http://localhost:4000에서 확인합니다. | . ",
    "url": "/#getting-started",
    
    "relUrl": "/#getting-started"
  },"18": {
    "doc": "홈",
    "title": "홈",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  }
}
